{"version":3,"sources":["webpack:///./src/assets/avatar/img_avatar1.png","webpack:///./node_modules/core-js/modules/_strict-method.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/node-libs-browser/mock/process.js","webpack:///./node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/core-js/modules/es6.array.sort.js","webpack:///./node_modules/firebase/app/dist/index.cjs.js","webpack:///./src/assets/avatar/img_avatar3.png","webpack:///./node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///./node_modules/@firebase/database/node_modules/tslib/tslib.es6.js","webpack:///./src/assets/avatar sync ^\\.\\/.*$","webpack:///./node_modules/@firebase/logger/dist/index.esm.js","webpack:///./src/assets/avatar/img_avatar4.png","webpack:///./node_modules/@firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/util/dist/index.cjs.js","webpack:///./src/firebase.js","webpack:///./src/assets/avatar/img_avatar5.png","webpack:///./src/assets/avatar/avatar7.png","webpack:///./node_modules/path-browserify/index.js","webpack:///./src/assets/avatar/img_avatar2.png","webpack:///./node_modules/@firebase/util/node_modules/tslib/tslib.es6.js"],"names":["module","exports","__webpack_require__","p","fails","method","arg","call","process","_interopDefault","ex","Object","defineProperty","value","util","logger","tslib_1","firebase","DOMStorageWrapper","domStorage_","this","prefix_","prototype","set","key","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","var_args","_i","arguments","length","message","i","Array","isArray","apply","logger$1","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","logWrapper","prefix","concat","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","forEach","val","doubleToIEEE754String","v","s","f","ln","bits","ebits","fbits","bias","Infinity","abs","pow","min","LN2","round","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","enumerable","configurable","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","isEmpty","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","results","charAt","_a","segment","kv","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","queryParams","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","OnDisconnect","repo_","cancel","onComplete","validateArgCount","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","setMaxNode","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","setNodeFromJSON","setMaxNode$1","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","safeGet","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","clone","newIndexes","addToIndexes","_this","map","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON$1","json","jsonLeaf","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","__referenceConstructor","OperationType","ValueIndex","valueNode","VALUE_INDEX","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","childrenNode","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","getCount","thisCount","otherKey","getAnyKey","thisKey","every","cb","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","endName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","validateContextObject","valueCallback","removeEventCallbackForQuery","once","userCallback","cancelOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","error$$1","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","item","clear","SparseSnapshotTree","find","childKey","remember","forget","self_1","tree","safeToRemove","forEachTree","prefixPath","func","generateWithValues","values","Date","getTime","resolveDeferredValue","serverValues","resolveDeferredValueTree","resolvedTree","resolveDeferredValueSnapshot","rawPri","leafNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","children","subtree","Empty","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","getValues","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","remaining","existing","generateEventsForChanges_","getInitialEvents","initialChanges","eventNode","SyncPoint","views_","optCompleteServerCache","view","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","completeView","findValue","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","newWriteTree","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","write","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","findKey","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","needToReevaluate","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","getToken","forceRefresh","then","Promise","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","options","StatsCollection","counters_","incrementCounter","amount","deepCopy","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","isMobileCordova","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","state_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","theURL","nodeRestRequest","newRequest_","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","CONSTANTS","NODE_ADMIN","headers","User-Agent","SDK_VERSION","platform","env","NODE_ENV","BASE_URL","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","token_1","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","console","clientName","NODE_CLIENT","isReactNative","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParamaters","toRestQueryStringParameters","restRequest_","status_1","queryStringParameters","authTokenData","authToken","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","Repo","forceRestClient","app","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offsetNode","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","oldChildSnap","compareNext","remainsInWindow","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","promiseComplete","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","name_","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","unwatcher","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","DATABASE_URL_OPTION","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","delete","__awaiter","__generator","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","freeze","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","ConnectionTarget","listens","firebaseRef","TEST_ACCESS","registerDatabase","instance","registerService","unused","nextTick","arch","execPath","title","pid","browser","argv","binding","cwd","chdir","dir","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","fetch","support","searchParams","iterable","Symbol","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","has","hasOwnProperty","thisArg","items","iteratorFor","entries","methods","Request","_bodyInit","Body","Response","statusText","redirectStatuses","redirect","RangeError","input","init","parseHeaders","getAllResponseHeaders","responseURL","TypeError","ontimeout","credentials","withCredentials","responseType","setRequestHeader","polyfill","done","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","Uint8Array","chars","fromCharCode","bufferClone","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","decode","JSON","parse","normalizeMethod","upcased","mode","referrer","form","trim","bytes","rawHeaders","preProcessedHeaders","line","bodyInit","ok","$export","aFunction","toObject","$sort","P","F","comparefn","__webpack_exports__","global","setTimeoutFunc","noop","_state","_handled","_value","_deferreds","doResolve","handle","_immediateFn","onFulfilled","onRejected","newValue","finale","_unhandledRejectionFn","Handler","prom","constructor","all","arr","race","setImmediate","globalNS","createCommonjsModule","_global","Function","__g","_core","core","__e","_isObject","it","_anObject","_fails","exec","_descriptors","is","_domCreate","_ie8DomDefine","_toPrimitive","S","valueOf","dP","O","Attributes","_objectDp","_propertyDesc","bitmap","writable","_hide","object","_has","px","_uid","_redefine","SRC","TO_STRING","$toString","TPL","inspectSource","safe","isFunction","_aFunction","_ctx","that","PROTOTYPE","own","out","exp","IS_FORCED","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","B","target","expProto","U","W","R","_export","_cof","_iobject","propertyIsEnumerable","_defined","_toObject","ceil","_toInteger","_toLength","_isArray","SHARED","store","_shared","_wks","USE_SYMBOL","$exports","SPECIES","_arraySpeciesConstructor","original","C","_arraySpeciesCreate","_arrayMethods","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","create","$this","callbackfn","UNSCOPABLES","ArrayProto","_addToUnscopables","$find","KEY","forced","$find$1","KEY$1","forced$1","_toIobject","min$1","_toAbsoluteIndex","_arrayIncludes","IS_INCLUDES","el","fromIndex","shared","_sharedKey","arrayIndexOf","IE_PROTO","_objectKeysInternal","names","_enumBugKeys","_objectKeys","f$1","getOwnPropertySymbols","_objectGops","f$2","_objectPie","$assign","assign","_objectAssign","A","K","T","aLen","getSymbols","isEnum","MATCH","_isRegexp","isRegExp","_stringContext","searchString","NAME","MATCH$1","_failsIsRegexp","re","STARTS_WITH","$startsWith","startsWith","_stringRepeat","repeat","_meta","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","fastKey","getWeak","onFreeze","meta","NEED","def","TAG","_setToStringTag","f$3","_wksExt","_library","_wksDefine","$Symbol","_enumKeys","symbols","_objectDps","Properties","document$1","_html","documentElement","IE_PROTO$1","PROTOTYPE$1","createDict","iframeDocument","lt","gt","_objectCreate","hiddenKeys","f$4","_objectGopn","gOPN","toString$1","windowNames","getWindowNames","f$5","_objectGopnExt","gOPD","getOwnPropertyDescriptor","f$6","_objectGopd","gOPD$1","dP$1","gOPN$1","$JSON","_stringify","PROTOTYPE$2","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","D","protoDesc","wrap","sym","_k","isSymbol","$defineProperty","$defineProperties","l","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","replacer","$replacer","TAG$1","ARG","tryGet","_classof","callee","_stringAt","pos","charCodeAt","_iterators","IteratorPrototype","_iterCreate","Constructor","IE_PROTO$2","ObjectProto$1","_objectGpo","getPrototypeOf","ITERATOR","BUGGY","FF_ITERATOR","KEYS","VALUES","returnThis","_iterDefine","Base","IS_SET","FORCED","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","$at","iterated","_t","point","_iterStep","es6_array_iterator","Arguments","ITERATOR$1","TO_STRING_TAG","ArrayValues","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","collections","explicit","Collection","__assign","__rest","__decorate","__param","__metadata","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","setPrototypeOf","__proto__","__","decorators","desc","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","_arguments","generator","fulfilled","step","y","g","_","label","sent","trys","ops","verb","throw","return","o","ar","asyncIterator","settle","fulfill","cooked","mod","__esModule","default","./avatar7.png","./img_avatar1.png","./img_avatar2.png","./img_avatar3.png","./img_avatar4.png","./img_avatar5.png","webpackContext","webpackContextResolve","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","debug","level","inst","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","config","firebase_","isDeleted_","services_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","getUid","addAuthTokenListener","removeAuthTokenListener","checkDestroyed_","removeApp","services","serviceKey","instanceKey","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","props","deepExtend","createFirebaseNamespace","apps_","appHooks","initializeApp","apps","extendNamespace","createSubscribe","ErrorFactory","useAsService","callAppHooks","rawConfig","name_1","getApps","createService","serviceProperties","appHook","allowMultipleInstances","serviceNamespace","appArg","serviceFxn","eventName","serviceName","factoryName","useService","patchProperty","appErrors","errors","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","assertion","byteArrayToString","c1","c2","c3","c4","u","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","opt_webSafe","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","haveByte4","byte4","base64Decode","dateValue","prop","getUA","ERROR_NAME","captureStackTrace","patchCapture","captureFake","FirebaseError","pattern","template","fullCode","claims","signature","isValidTimestamp","validSince","validUntil","issuedAtTime","decoded","extend","objTo","objFrom","isNonNullObject","rv","opt_obj","opt_this","querystringParams","arrayVal","querystringDecode","tokens","Hash","blockSize","chain_","buf_","W_","pad_","inbuf_","total_","reset","compress_","opt_offset","opt_length","lengthMinusBlock","inbuf","totalBits","executor","onNoObservers","ObserverProxy","subscribe","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","nextOrObserver","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","onError","methods_1","minCount","maxCount","argCount","argError","argName","validateNamespace","stringToByteArray$1","db","databaseURL","normalizeArray","allowAboveRoot","up","unshift","splitPathRe","splitPath","filename","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","paths","relative","end","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","basename","ext","extname"],"mappings":"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","file":"js/platform~profile.b897c50d.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/img_avatar1.61d90d84.png\";","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParamaters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n","module.exports = __webpack_public_path__ + \"img/img_avatar3.a5e81f19.png\";","import 'whatwg-fetch';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.5.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg) {\n  return _cof(arg) == 'Array';\n};\n\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function (key) {\n  return store[key] || (store[key] = {});\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\nvar SPECIES = _wks('species');\n\nvar _arraySpeciesConstructor = function (original) {\n  var C;\n  if (_isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;\n    if (_isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n\n\nvar _arraySpeciesCreate = function (original, length) {\n  return new (_arraySpeciesConstructor(original))(length);\n};\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\n\n\n\n\n\nvar _arrayMethods = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || _arraySpeciesCreate;\n  return function ($this, callbackfn, that) {\n    var O = _toObject($this);\n    var self = _iobject(O);\n    var f = _ctx(callbackfn, that, 3);\n    var length = _toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n\nvar $find = _arrayMethods(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n_export(_export.P + _export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY);\n\nvar find = _core.Array.find;\n\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n\nvar $find$1 = _arrayMethods(6);\nvar KEY$1 = 'findIndex';\nvar forced$1 = true;\n// Shouldn't skip holes\nif (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });\n_export(_export.P + _export.F * forced$1, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY$1);\n\nvar findIndex = _core.Array.findIndex;\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\nvar _stringRepeat = function repeat(count) {\n  var str = String(_defined(this));\n  var res = '';\n  var n = _toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n_export(_export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: _stringRepeat\n});\n\nvar repeat = _core.String.repeat;\n\nvar _meta = createCommonjsModule(function (module) {\nvar META = _uid('meta');\n\n\nvar setDesc = _objectDp.f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !_fails(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n});\nvar _meta_1 = _meta.KEY;\nvar _meta_2 = _meta.NEED;\nvar _meta_3 = _meta.fastKey;\nvar _meta_4 = _meta.getWeak;\nvar _meta_5 = _meta.onFreeze;\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar f$3 = _wks;\n\nvar _wksExt = {\n\tf: f$3\n};\n\nvar _library = false;\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function (name) {\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });\n};\n\n// all enumerable object keys, includes symbols\n\n\n\nvar _enumKeys = function (it) {\n  var result = _objectKeys(it);\n  var getSymbols = _objectGops.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = _objectPie.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar document$1 = _global.document;\nvar _html = document$1 && document$1.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n\tf: f$4\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\nvar gOPN = _objectGopn.f;\nvar toString$1 = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n\tf: f$5\n};\n\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if (_ie8DomDefine) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n\tf: f$6\n};\n\n// ECMAScript 6 symbols shim\n\n\n\n\n\nvar META = _meta.KEY;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar gOPD$1 = _objectGopd.f;\nvar dP$1 = _objectDp.f;\nvar gOPN$1 = _objectGopnExt.f;\nvar $Symbol = _global.Symbol;\nvar $JSON = _global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE$2 = 'prototype';\nvar HIDDEN = _wks('_hidden');\nvar TO_PRIMITIVE = _wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols = _shared('symbols');\nvar OPSymbols = _shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE$2];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function () {\n  return _objectCreate(dP$1({}, 'a', {\n    get: function () { return dP$1(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD$1(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP$1(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);\n} : dP$1;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if (_has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP$1(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n  var D = gOPD$1(it, key);\n  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN$1(_toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f = $defineProperty;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if (_descriptors && !_library) {\n    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function (name) {\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return _has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!_isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n// 19.1.3.6 Object.prototype.toString()\n\nvar test = {};\ntest[_wks('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  _redefine(Object.prototype, 'toString', function toString() {\n    return '[object ' + _classof(this) + ']';\n  }, true);\n}\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar symbol = _core.Symbol;\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _iterators = {};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto$1 = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto$1 : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\nvar _iterStep = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = _toIobject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if (kind == 'keys') return _iterStep(0, index);\n  if (kind == 'values') return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\n_addToUnscopables('keys');\n_addToUnscopables('values');\n_addToUnscopables('entries');\n\nvar ITERATOR$1 = _wks('iterator');\nvar TO_STRING_TAG = _wks('toStringTag');\nvar ArrayValues = _iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = _global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);\n    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\n    _iterators[NAME] = ArrayValues;\n    if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);\n  }\n}\n\nvar iterator = _wksExt.f('iterator');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","var map = {\n\t\"./avatar7.png\": \"dece\",\n\t\"./img_avatar1.png\": \"190d\",\n\t\"./img_avatar2.png\": \"eed9\",\n\t\"./img_avatar3.png\": \"78c3\",\n\t\"./img_avatar4.png\": \"ba68\",\n\t\"./img_avatar5.png\": \"de51\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"a0fc\";","/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n","module.exports = __webpack_public_path__ + \"img/img_avatar4.f05f7bfb.png\";","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.5.0',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = require('tslib');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nfirebase.initializeApp({\n  databaseURL: \"https://prestige-reviews.firebaseio.com\"\n});\n\nexport const db = firebase.database();\n","module.exports = __webpack_public_path__ + \"img/img_avatar5.9726ef88.png\";","module.exports = __webpack_public_path__ + \"img/avatar7.1ee966d6.png\";","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","module.exports = __webpack_public_path__ + \"img/img_avatar2.55221557.png\";","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"sourceRoot":""}